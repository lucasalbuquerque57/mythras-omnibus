/*

    MYTHRAS CHARACTER ENUMS

*/

enum MythrasStdCharacteristicType {
  Strength
  Constitution
  Size
  Dexterity
  Intelligence
  Power
  Charisma
}

enum MythrasStdAttributeType {
  ActionPoints
  DamageModifier
  ExperienceModifier
  HealingRate
  InitiativeBonus
  LuckPoints
  MovementRate
}

enum MythrasStdHitLocationType {
  Head
  Thorax
  Abdomen
  RightArm
  LeftArm
  RightLeg
  LeftLeg
  Tail
}

enum MythrasStdStandardSkillType {
  Athletics
  Boating
  Brawn
  Conceal
  Customs
  Dance
  Deceit
  Drive
  Endurance
  Evade
  FirstAid
  Influence
  Insight
  Locale
  Perception
  Ride
  Sing
  Stealth
  Swim
  Unarmed
  Willpower
}

enum MythrasStdSpellType {
  Theism
  Sorcery
  FolkMagic
  Mysticism
  Animism
}

enum MythrasStdMagicSkillType {
  Binding
  Devotion
  Exhort
  FolkMagic
  Invocation
  Meditation
  Mysticism
  Shaping
  Trance
}

enum MythrasStdProfessionalSkillType {
  Acting
  Acrobatics
  // Professional Skills that requires tags/more specific stuff
  Art
  Bureaucracy
  Commerce
  Courtesy
  // Professional Skills that requires tags/more specific stuff
  Craft
  // Professional Skills that requires tags/more specific stuff
  Culture
  Disguise
  Engineering
  Gambling
  Healing
  // Professional Skills that requires tags/more specific stuff
  Language
  Literacy
  Lockpicking
  // Professional Skills that requires tags/more specific stuff
  Lore
  Mechanisms
  Navigation
  Oratory
  Seamanship
  Seduction
  Sleight
  Streetwise
  Survival
  Teach
  Track
}

model MythrasStdCharacter {
  id              String        @id @default(cuid())
  character       Character     @relation(fields: [id], references: [id])


  // Relationships
  personal        MythrasStdCharacterPersonal[]
  characteristics MythrasStdCharacterCharacteristic[]
  attributes      MythrasStdCharacterAttribute[]
  hitLocations    MythrasStdHitLocation[]
  standardSkills  MythrasStdStandardSkill[]
  magicSkills     MythrasStdMagicSkill[]
  professionalSkills MythrasStdProfessionalSkill[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  //MythrasStdCombatStyle MythrasStdCombatStyle[]

  //MythrasStdPassions MythrasStdPassions[]
}

model MythrasStdCharacterPersonal {
  id              String        @id @default(cuid())
  characterId     String
  character       MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name            String
  player          String
  nickname        String?
  age             Int?
  gender          String
  species         String
  culture         String
  homeland        String
  religion        String?
  deity           String?
  socialClass     String?
  lord            String?
  career          String
  faction         String?
  handedness      String?
  frame           String?
  height          String?
  weight          String?
}


model MythrasStdCharacterCharacteristic {
  id              String        @id @default(cuid())
  characterId     String
  character       MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name            MythrasStdCharacteristicType
  original        String
  current         String
}

model MythrasStdCharacterAttribute {
  id              String        @id @default(cuid())
  characterId     String
  character       MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name            MythrasStdAttributeType
  original        String
  current         String
}

model MythrasStdHitLocation {
  id              String        @id @default(cuid())
  characterId     String
  character       MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  location        MythrasStdHitLocationType
  armor           String?
  hp              Int
  hpHistory       Json          // Store as JSON array of change logs
  ap              Int           @default(0)
  apHistory       Json          // Store as JSON array of change logs
}

model MythrasStdStandardSkill {
  id                String        @id @default(cuid())
  characterId       String
  character         MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name              MythrasStdStandardSkillType
  baseValue         Int
  totalAddedPoints  Int
  culturePoints     Int
  careerPoints      Int
  bonusPoints       Int
  currentProficiency Int
  isProficient      Boolean
  isFumbled         Boolean       @default(false)
}

model MythrasStdProfessionalSkill {
  id                String        @id @default(cuid())
  characterId       String
  character         MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name              MythrasStdProfessionalSkillType
  baseValue         Int
  totalAddedPoints  Int
  culturePoints     Int
  careerPoints      Int
  bonusPoints       Int
  currentProficiency Int
  isProficient      Boolean
  isFumbled         Boolean       @default(false)
  specialty         String?       // Only populated for 'Any' skills

  @@unique([characterId, name, specialty]) // Composite uniqueness
  @@index([characterId])
  @@index([name])
}

model MythrasStdMagicSkill {
  id                String        @id @default(cuid())
  characterId       String
  character         MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name              MythrasStdMagicSkillType
  baseValue         Int
  totalAddedPoints  Int
  culturePoints     Int
  careerPoints      Int
  bonusPoints       Int
  currentProficiency Int
  isProficient      Boolean
  isFumbled         Boolean       @default(false)
  spellType         String        // Could be enum if needed
}

/*
model MythrasStdCombatStyle {
  id                String        @id @default(cuid())
  characterId       String
  character         MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name              String
  weapons           String
  traits            String
  baseValue         Int
  totalAddedPoints  Int
  culturePoints     Int
  careerPoints      Int
  bonusPoints       Int
  currentProficiency Int
  isProficient      Boolean       @default(true)
  isFumbled         Boolean       @default(false)
}

model MythrasStdPassions {
  id                String        @id @default(cuid())
  characterId       String
  character         MythrasStdCharacter     @relation(fields: [characterId], references: [id])
  name              String
  about             String
  baseValue         Int
  totalAddedPoints  Int
  culturePoints     Int
  careerPoints      Int
  bonusPoints       Int
  currentProficiency Int
  isProficient      Boolean       @default(true)
  isFumbled         Boolean       @default(false)
}

*/

