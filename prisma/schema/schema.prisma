// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

/* User Stuff */

enum UserRole {
  ADMIN
  DIRECTOR
  PLAYER
}

enum GameSystem {
  MYTHRAS_STD
}

model User {
  id                          String                    @id @default(cuid())
  name                        String?
  email                       String?                   @unique
  emailVerified               DateTime?
  image                       String?
  password                    String?
  role                        UserRole                  @default(PLAYER)

  accounts                    Account[]
  isTwoFactorEnabled          Boolean                   @default(false)
  twoFactorConfirmation       TwoFactorConfirmation?
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt

  // user characters
  characters                  Character[]
  // user campaigns as a director
  campaign                    Campaign[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// TODO: I should rename this to start with upper case (but it's not worth the hassle)
model verificationToken {
  id                String    @id @default(cuid())
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                String    @id @default(cuid())
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                String    @id @default(cuid())
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}